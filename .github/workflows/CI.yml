name: CI

on: [push]

permissions:
    contents: write
    pull-requests: write

jobs:
    'test-backend':
        runs-on: ubuntu-latest
        name: Python ${{ matrix.python-version }} sample with Postgres ${{ matrix.postgres-version }}
        strategy:
            matrix:
                python-version: [
                        '3.9',
                        '3.10',
                        '3.11',
                        '3.12',
                        '3.13',
                        'pypy-3.9',
                        'pypy-3.10',
                        #'pypy-3.11',
                    ]
                postgres-version: ['13', '14', '15', '16', '17']
        continue-on-error: true
        services:
            database:
                image: postgres:${{ matrix.postgres-version }}
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: postgres
                ports:
                    - 5432:5432
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        env:
            DJANGO_DATABASE_HOST: localhost
            DJANGO_DATABASE_USER: postgres
            DJANGO_DATABASE_PASSWORD: postgres
            DJANGO_DATABASE_NAME: postgres

        steps:
            - uses: actions/checkout@v4
            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}
            - uses: actions/checkout@v4
            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  virtualenvs-create: true
                  virtualenvs-in-project: true
            - name: Install python dependencies
              run: |
                  poetry install
                  poetry run pip install -e .

            - name: Run tests
              run: |
                  poetry run pytest -v -x

    'test-frontend':
        name: Test Frontend
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4

            - name: Install Node.JS
              uses: actions/setup-node@v4

            - name: Install dependencies
              run: npm ci

            - name: Build
              run: npm run build

            - name: Test
              run: npm run test

    release:
        name: Release
        if: "startsWith(github.ref, 'refs/tags/')"
        runs-on: ubuntu-latest
        needs: ['test-backend', 'test-frontend']

        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4

            - name: Install Python
              uses: actions/setup-python@v5
              with:
                  python-version: 3.13

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: latest
                  cache: npm

            - name: Install dependencies
              run: npm ci

            - name: Build ( frontend )
              run: npm run build

            - uses: actions/checkout@v4
            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  virtualenvs-create: true
                  virtualenvs-in-project: true

            # - name: Install python dependencies
            #   run: |
            #       poetry install --sync --no-interaction --no-root

            - name: Set pypi token
              run: |
                  poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

            - name: Publish
              run: |
                  poetry publish --build
